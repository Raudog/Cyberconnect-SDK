export interface Connection {
    connectionType: string;
    target: string;
    namespace: string;
    createdAt: string;
    alias: string;
}
export declare type Connections = Connection[];
export declare enum Blockchain {
    ETH = "ETH",
    SOLANA = "SOLANA"
}
export declare type SolananChainRef = '';
export interface CyberConnectStore {
    outboundLink: Connections;
}
export interface ConfigBase {
    namespace: string;
    env?: keyof typeof Env;
    provider: any;
    signingMessageEntity?: string;
}
export interface ConfigEth {
    chain?: Blockchain.ETH;
    chainRef?: never;
}
export interface ConfigSolana {
    chain: Blockchain.SOLANA;
    chainRef: SolananChainRef;
}
export declare type Config = ConfigBase & (ConfigEth | ConfigSolana);
export declare enum Env {
    STAGING = "STAGING",
    PRODUCTION = "PRODUCTION"
}
export interface Endpoint {
    ceramicUrl: string;
    cyberConnectSchema: string;
    cyberConnectApi: string;
}
export declare type OperationName = 'follow' | 'like' | 'report' | 'watch' | 'vote';
export declare enum ConnectionType {
    FOLLOW = "FOLLOW",
    LIKE = "LIKE",
    REPORT = "REPORT",
    WATCH = "WATCH",
    VOTE = "VOTE"
}
export interface Operation {
    name: OperationName | 'unfollow';
    from: string;
    to: string;
    namespace: string;
    network: Blockchain;
    alias?: string;
    timestamp: number;
    connectionType?: ConnectionType;
}
//# sourceMappingURL=types.d.ts.map